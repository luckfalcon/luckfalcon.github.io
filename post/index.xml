<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 主页</title>
    <link>https://luckfalcon.github.io/post/</link>
    <description>Recent content in Posts on 主页</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>This is a customized copyright.</copyright>
    <lastBuildDate>Thu, 26 Oct 2023 19:49:47 +0800</lastBuildDate><atom:link href="https://luckfalcon.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Markdown</title>
      <link>https://luckfalcon.github.io/post/markdown/</link>
      <pubDate>Thu, 26 Oct 2023 19:49:47 +0800</pubDate>
      
      <guid>https://luckfalcon.github.io/post/markdown/</guid>
      <description>主要内容 Markdown是什么？ 谁创造了它？ 为什么要使用它？ 怎么使用？ 谁在用？ 尝试一下 正文 1. Markdown是什么？ Markdown是一种轻量级标记语言，它以纯文本形式(易读、易写、易更改)编写文档，并最终以HTML格式发布。 Markdown也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。
2. 谁创造了它？ 它由Aaron Swartz和John Gruber共同设计，Aaron Swartz就是那位于去年（2013年1月11日）自杀,有着开挂一般人生经历的程序员。维基百科对他的介绍是：软件工程师、作家、政治组织者、互联网活动家、维基百科人。
他有着足以让你跪拜的人生经历：
14岁参与RSS 1.0规格标准的制订。 2004年入读斯坦福，之后退学。 2005年创建Infogami，之后与Reddit合并成为其合伙人。 2010年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。 2011年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。 2013年1月自杀身亡。 天才都有早逝的归途。
3. 为什么要使用它？ 它是易读（看起来舒服）、易写（语法简单）、易更改纯文本。处处体现着极简主义的影子。 兼容HTML，可以转换为HTML格式发布。 跨平台使用。 越来越多的网站支持Markdown。 更方便清晰地组织你的电子邮件。（Markdown-here, Airmail） 摆脱Word（我不是认真的）。 4. 怎么使用？ 如果不算扩展，Markdown的语法绝对简单到让你爱不释手。
Markdown语法主要分为如下几大部分： 标题，段落，区块引用，代码区块，强调，列表，分割线，链接，图片，反斜杠 \，符号&amp;rsquo;`&amp;rsquo;。
4.1 标题 两种形式：
1）使用=和-标记一级和二级标题。
一级标题
=========
二级标题 ---------
效果：
一级标题 二级标题 2）使用#，可表示1-6级标题。
# 一级标题
## 二级标题
### 三级标题
#### 四级标题
##### 五级标题
###### 六级标题
效果：
一级标题 二级标题 三级标题 四级标题 五级标题 六级标题 4.</description>
    </item>
    
    <item>
      <title>Effectivecpp</title>
      <link>https://luckfalcon.github.io/post/effectivecpp/</link>
      <pubDate>Mon, 23 Oct 2023 01:47:59 +0800</pubDate>
      
      <guid>https://luckfalcon.github.io/post/effectivecpp/</guid>
      <description>luckfalcon的github page
C++编程注意条款 拷贝构造函数 &amp;mdash; 初始化 &amp;mdash;&amp;ndash;A(B)&amp;mdash; 只发生在对象创建时 拷贝赋值运算符 &amp;ndash; 同类型对象值赋值给创建对象 &amp;ndash;A=B 值传递（pass-by-value）&amp;ndash; 调用构造函数 引用传递 (passed-by-reference) &amp;ndash; 不调用构造函数 C++四大次级语言
c 语言部分编程 class 类编程 template 模板编程 STL 标准库编程 条款2：尽量以 const，enum，inline 替换 #define #define 没有作用域概念，且不做类型检查，仅仅是变量替换 (包括变量的前后缀，表达式代入)。 #define max(a,b) f((a) &amp;gt; (b)? (a) : (b)) int a = 5,b = 0; max(++a, b);	//a被累加2次 max(++a, b+10);	//a被累加1次 enum hack (枚举hack) 常用来初始化类内数组大小，是模板元编程的基础技术。 class Test {	static const int num = 1;//此处仅为声明而非定义 int arr[num]; }; const int num;//此处为定义,放在实现文件中而非头文件中 enum{num = 5}//可代替上 static const int class Test { private: enum {arr_size = 10};//在编译器不支持编译期间类内static初值时(仅限整数情况) static const int arr[arr_size]; }; 小结</description>
    </item>
    
  </channel>
</rss>
