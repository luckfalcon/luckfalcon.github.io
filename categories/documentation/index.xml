<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Documentation - Category - LuckFalcon</title>
        <link>https://luckfalcon.github.io/categories/documentation/</link>
        <description>Documentation - Category - LuckFalcon</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><atom:link href="https://luckfalcon.github.io/categories/documentation/" rel="self" type="application/rss+xml" /><item>
    <title>A sumary of more effective C&#43;&#43; </title>
    <link>https://luckfalcon.github.io/more-effective-cpp/</link>
    <pubDate>Thu, 02 Nov 2023 15:30:35 &#43;0800</pubDate>
    <author>Luckfalcon</author>
    <guid>https://luckfalcon.github.io/more-effective-cpp/</guid>
    <description><![CDATA[]]></description>
</item>
<item>
    <title>cpp primer sumary</title>
    <link>https://luckfalcon.github.io/cppprimer5/</link>
    <pubDate>Tue, 31 Oct 2023 21:49:19 &#43;0800</pubDate>
    <author>Luckfalcon</author>
    <guid>https://luckfalcon.github.io/cppprimer5/</guid>
    <description><![CDATA[<h3 id="c-primer-fifth-edit">C++ primer fifth edit</h3>]]></description>
</item>
<item>
    <title>Effective C&#43;&#43;</title>
    <link>https://luckfalcon.github.io/effective-cpp/</link>
    <pubDate>Tue, 31 Oct 2023 21:57:40 &#43;0800</pubDate>
    <author>Luckfalcon</author>
    <guid>https://luckfalcon.github.io/effective-cpp/</guid>
    <description><![CDATA[luckfalcon的github page
C++编程注意条款 拷贝构造函数与拷贝赋值运算符 拷贝构造函数 : 初始化 &ndash;&gt; A(B) &ndash;&gt; 只发生在对象创建时 拷贝赋值运算符 : 同类型对象值赋值给创建对象 &ndash;&gt; A=B 值传递与引用传递 值传递 ( pass-by-value ) : 调用构造函数 引用传递 (passed-by-reference) : 不调用构造函数 C++ 包含四大次级语言 c 语言部分编程 、class 类编程、template 模板编程、STL 标准库编程。 条款2：尽量以 const，enum，inline 替换 #define #define 没有作用域概念，且不做类型检查，仅仅是变量替换 (包括变量的前后缀，表达式代入)。 1 2 3 4 #define max(a,b) f((a) &gt; (b)? (a) : (b)) int a = 5,b = 0; max(++a, b);	//a被累加2次 max(++a, b+10);	//a被累加1次 enum hack (枚举hack) 常用来初始化类内数组大小，是模板元编程的基础技术。 1 2 3 4 5 6 7 8 class Test {	static const int num = 1;//此处仅为声明而非定义 int arr[num]; }; const int num;//此处为定义,放在实现文件中而非头文件中 enum{num = 5}//可代替上 static const int 1 2 3 4 5 6 class Test { private: enum {arr_size = 10};//在编译器不支持编译期间类内static初值时(仅限整数情况) static const int arr[arr_size]; }; 小结]]></description>
</item>
<item>
    <title>A sumary of cmake</title>
    <link>https://luckfalcon.github.io/cmake-sumary/</link>
    <pubDate>Fri, 10 Nov 2023 23:16:35 &#43;0800</pubDate>
    <author>Luckfalcon</author>
    <guid>https://luckfalcon.github.io/cmake-sumary/</guid>
    <description><![CDATA[A sumary of cmake]]></description>
</item>
<item>
    <title>design pattern</title>
    <link>https://luckfalcon.github.io/design-pattern/</link>
    <pubDate>Wed, 21 Feb 2024 05:13:28 &#43;0800</pubDate>
    <author>Luckfalcon</author>
    <guid>https://luckfalcon.github.io/design-pattern/</guid>
    <description><![CDATA[<p>design pattern</p>]]></description>
</item>
<item>
    <title>Programmer Math</title>
    <link>https://luckfalcon.github.io/progmmer-math/</link>
    <pubDate>Wed, 06 Mar 2024 21:41:17 &#43;0800</pubDate>
    <author>Luckfalcon</author>
    <guid>https://luckfalcon.github.io/progmmer-math/</guid>
    <description><![CDATA[]]></description>
</item>
<item>
    <title>linux shell</title>
    <link>https://luckfalcon.github.io/linux-shell-script/</link>
    <pubDate>Fri, 22 Mar 2024 23:24:49 &#43;0800</pubDate>
    <author>Luckfalcon</author>
    <guid>https://luckfalcon.github.io/linux-shell-script/</guid>
    <description><![CDATA[<p>linux shell script</p>]]></description>
</item>
</channel>
</rss>
